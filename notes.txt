NOTES


- write documentation for this setup
    - all traffic to api/ is routed to index.php 
    - 


- add authentication   But how?? jsontokens??

- ADD SECURITY layer - authenticate and validate access to API URLs 
    in theory, you can limit access to api and data 
        by checking what script/url is making the request for the api endpoint
            so, for instance, if the API request is being made by endpoint.php, then access should be granted
            

- create heartbeat.php and pulse.php to periodically check login session and internet connectivity





// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// pretty URLS with .htaccess   .htaccess   .htaccess 
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

# how to edit or enable htaccess: https://docs.bolt.cm/4.0/howto/making-sure-htaccess-works 

# enable mod rewrite on apache
sudo a2enmod rewrite

# restart apache 
sudo systemctl restart apache2

Add AllowOverride All to apache2.conf 

    cd /etc/apache2
    sudo vi apache2.conf 

    <Directory /var/www/>
            Options Indexes FollowSymLinks
            AllowOverride All
            Require all granted
    </Directory>

# restart apache 
sudo systemctl restart apache2





Add .htaccess file to web root 

    <IfModule mod_rewrite.c>
    RewriteEngine On
    RewriteBase /
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteRule api/(.*)$ api/index.php?request=$1 [QSA,NC,L]
    </IfModule>


    







// **************************************************************


How to list all server vars....



/* 
echo "<h1>$ _ SERVER Vars</h1>";
echo "<br><br>";
var_dump($APIPath);
echo "<br><br>";

foreach($_SERVER as $key_name => $key_value) {
    echo "<strong>$key_name</strong><br>  $key_value <br><br>";
} 
 */   







// **************************************************************







A server that responds Access-Control-Allow-Origin: * allows all origins which can be a large security risk.

Only use * if your application absolutely requires it such as creating an open/public API.


Access-Control-Allow-Origin: https://www.mydomain.com
Access-Control-Allow-Methods: POST, GET, OPTIONS
Access-Control-Allow-Headers: Authorization, Content-Type
Content-Type: application/json


Access-Control-Allow-Methods	GET, POST, PUT, DELETE



// Allow from any origin
if(isset($_SERVER["HTTP_ORIGIN"]))
{
    // You can decide if the origin in $_SERVER['HTTP_ORIGIN'] is something you want to allow, or as we do here, just allow all
    header("Access-Control-Allow-Origin: {$_SERVER['HTTP_ORIGIN']}");
}
else
{
    //No HTTP_ORIGIN set, so we allow any. You can disallow if needed here
    header("Access-Control-Allow-Origin: *");
}

header("Access-Control-Allow-Methods: POST, GET, OPTIONS, DELETE, PUT");
header('Access-Control-Max-Age: 86400');    // cache for 1 day
















// **************************************************************





df
df -f 
df -h 
df -a 
df -T 

du 
du -h 
du -a 
du -s 


# display all files/directories
ls -lahG

# display all directories within current directory
ls -lah | grep ^d

# display by file size 
ls -lhS

# find biggest files and directories in the /home directory 
du -a /home | sort -n -r | head -n 10

# display the biggest directories in the current working directory
du -a | sort -n -r | head -n 10

du -hs * | sort -rh | head -10

# display the biggest files
find -type f -exec du -Sh {} + | sort -rh | head -n 10

# display all disk partitions
fdisk -l 

stat {filename or directory}



cd /tmp 
cd /var/tmp 
cd /dev/shm 





// ======================================================================
api naming handles...

// variable name options: 
// record, entry, report, document, file, source, unit
// procedure, operation, transaction, session 


The primary or most-commonly-used HTTP verbs (methods) are 
POST, GET, PUT, PATCH, and DELETE. 
These correspond to 
CREATE, READ, UPDATE, AND DELETE (or CRUD) operations, respectively. 
INSERT, SELECT, UPDATE, DELETE  in SQL syntax
// ======================================================================





        # =======================================
        // it looks like i can create dynamic properties in the constructor
        // however, these props will be public

        /* foreach($configuration['tArr'] as $prop => $value) {
            $this->{$prop} = '';
        } */

        /* 
        # =======================================
        # you can also set dynamic props OUTSIDE the Class instantiation
        # however, these props will be public

        $record = new API($connection, $configuration);
        $record->example = 'Dynamic property';
        echo $record->example;
        


        # =======================================
        # Here is a strategy to keep them PRIVATE

        protected $user_properties = array();

        public function createProperty($var_name, $val){
            $this->user_properties[$var_name] = $val;

        }

        public function __get($name){
            if(isset($this->user_properties[$name])
            return $this->user_properties[$name];

        }




        # =======================================
        # here is my strategy

        protected $conf = array();

        public function __construct($connection, $configuration) {

            $this->conn = $connection;

            // Table
            $this->apiTable = $configuration['table'];

            foreach($configuration['cols'] as $prop => $value) {
                //$this->{$prop} = $value;
                $this->conf[$prop] = $value;
            }

        }

        */
            



























CREATE TABLE `poc_api` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(256) NOT NULL,
  `email` varchar(50) DEFAULT NULL,
  `age` int(11) NOT NULL,
  `designation` varchar(255) NOT NULL,
  `created` datetime NOT NULL DEFAULT current_timestamp(),
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=57 DEFAULT CHARSET=utf8;






INSERT INTO `poc_api` (`name`, `email`, `age`, `designation`, `created`) VALUES 
('Miguel Doe', 'johndoe@gmail.com', 32, 'Data Scientist', '2012-06-01 02:12:30'),
('Juan Costa', 'sam.mraz1996@yahoo.com', 29, 'Apparel Patternmaker', '2013-03-03 01:20:10'),
('Maria Martell', 'liliane_hirt@gmail.com', 36, 'Accountant', '2014-09-20 03:10:25'),
('Concha Marion', 'michael2004@yahoo.com', 42, 'Shipping Manager', '2015-04-11 04:11:12'),
('Diego Popp', 'krystel_wol7@gmail.com', 48, 'Chief Sustainability Officer', '2016-01-04 05:20:30'),
('Pablo Wallin', 'neva_gutman10@hotmail.com', 37, 'Chemical Technician', '2017-01-10 06:40:10'),
('Julieta Hinze', 'davonte.maye@yahoo.com', 44, 'Transportation Planner', '2017-05-02 02:20:30'),
('Teresita Andrews', 'joesph.quitz@yahoo.com', 49, 'Wind Energy Engineer', '2018-01-04 05:15:35'),
('Marina Best', 'jeramie_roh@hotmail.com', 51, 'Geneticist', '2019-01-02 02:20:30'),
('Gabriela Ogle', 'summer_shanah@hotmail.com', 45, 'Space Sciences Teacher', '2020-02-01 06:22:50');






to get rewrite URL working you must ssh into your box and modify apache 



// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// Configure pretty URLS with Apache2 and .htaccess  
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

# how to edit or enable htaccess: https://docs.bolt.cm/4.0/howto/making-sure-htaccess-works 


vagrant ssh 

# enable mod rewrite on apache
sudo a2enmod rewrite

# restart apache 
sudo systemctl restart apache2

Add AllowOverride All to apache2.conf 

    cd /etc/apache2
    sudo vi apache2.conf 

    <Directory /var/www/>
            Options Indexes FollowSymLinks
            AllowOverride All
            Require all granted
    </Directory>

# restart apache 
sudo systemctl restart apache2





Add .htaccess file to web root 

    <IfModule mod_rewrite.c>
    RewriteEngine On
    RewriteBase /
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteRule api/(.*)$ api/index.php?request=$1 [QSA,NC,L]
    </IfModule>


    
